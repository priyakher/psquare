View(country)
result <- do.call(rbind.fill,lapply(json,as.data.frame,optional=T))
result <- as.data.frame(json)
result <- as.data.frame.list(json)
require(reshape2)
install.packages("reshape2")
install.packages("reshape2")
library("reshape2")
require(reshape2)
json$id <- rownames(json)
melt(json)
json.text <- readLines("C:/Users/Priya/Desktop/thesis/data/400785213.tar/user_data.json")
# parse JSON into named list
json      <- lapply(json.text,fromJSON)
View(json)
View(json)
df<-data.frame(json = unlist(json))
View(df)
View(df)
country<- list()
for ( i in 1:userLenghth)
{
count = json[[i]]$initial_region
if (is.null(country$count))
{
country$count  <- country$count + 1;
}
else
{
country$count<- 1;
}
}
View(country)
View(country)
country<- list()
for ( i in 1:userLenghth)
{
count = json[[i]]$initial_region
if (is.null(country[[count]]))
{
country[[count]]  <- country[[count]] + 1;
}
else
{
country[[count]]<- 1;
}
}
country<- list()
for ( i in 1:userLenghth)
{
count = json[[i]]$initial_region
country[[count]]  <- country[[count]] + 1;
}
print(json[[1]]["user_id"])
for ( i in 1:userLenghth)
{
count = json[[i]]$initial_region
country[[0]][count]  <- country[[0]][count] + 1;
}
country<- list()
countr[["width"]]=32
country<- list()
country[["width"]]=32
country[["width"]]
ct<-"width"
ct
country[[ct]]
json[[1]]$initial_region
json[[2]]$initial_region
country<- list()
for ( i in 1:userLenghth)
{
count = json[[i]]$initial_region
if ( is.null(count))
{}
else
{
country[[0]][count]  <- country[[0]][count] + 1;
}
}
country<- list()
for ( i in 1:userLenghth)
{
count = json[[i]]$initial_region
if ( is.null(count))
{}
else
{
country[[count]]  <- country[[count]] + 1;
}
}
View(country)
View(country)
View(country)
View(country)
View(country)
View(country)
View(country)
View(country)
View(country)
country
country<- list()
for ( i in 1:userLenghth)
{
count = json[[i]]$initial_region
if ( is.null(count))
{}
else
{
if (is.null(country[[count]]))
{}
else
country[[count]]  <- country[[count]] + 1;
}
}
country
country<- list()
for ( i in 1:userLenghth)
{
count = json[[i]]$initial_region
if ( is.null(count))
{}
else
{
if (is.null(country[[count]]))
{
country[[count]] <- 1
}
else
country[[count]]  <- country[[count]] + 1;
}
}
country
View(country)
View(country)
country[["Massachusetts"]]
plot(country)
country.data<- as.data.frame(country)
country.data
plot(country.data)
json.text <- readLines("C:/Users/Priya/Desktop/thesis/data/400785213.tar/raw_event_data.json")
# parse JSON into named list
json      <- lapply(json.text,fromJSON)
View(json)
View(json)
json.text <- readLines("C:/Users/Priya/Desktop/thesis/data/400785213.tar/raw_event_data.json")
# parse JSON into named list
json      <- lapply(json.text,fromJSON)
json[[1]]
############
install.packages("e1071");
############
install.packages("e1071")
library("e1071")
model <- naiveBayes(cluster ~ ., data = km1)
data = read.csv("result.csv", header=TRUE, sep=",")
setwd("C:/Users/Priya/Desktop/thesis/data/jsdata")
data = read.csv("result.csv", header=TRUE, sep=",")
str(data)
data[is.na(data)] <- 0
dat=data[,c(2,3,4)]
plot(dat, main = "xx", pch =20, cex =2)
set.seed(7)
km1 = kmeans(dat, 3, nstart=100)
newdata=data
newdata.train = split(newdata)
model <- naiveBayes(cluster ~ ., newdata = km1)
model <- naiveBayes(cluster ~ ., data = newdata)
data = read.csv("result.csv", header=TRUE, sep=",")
str(data)
data[is.na(data)] <- 0
dat=data[,c(2,3,4)]
plot(dat, main = "xx", pch =20, cex =2)
set.seed(7)
km1 = kmeans(dat, 3, nstart=100)
newdata=data
newdata$class=km1$cluster
model <- naiveBayes(class ~ ., data = newdata)
class(model)
summary(model)
print(model)
install.packages(caTools)
install.packages("caTools")
library("caTools")
set.seed(101)
sample = sample.split(newdata, SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
model <- naiveBayes(class ~ ., data = train)
model <- naiveBayes(class ~ ., data = train)
View(train)
data = read.csv("result.csv", header=TRUE, sep=",")
str(data)
data[is.na(data)] <- 0
dat=data[,c(2,3,4)]
plot(dat, main = "xx", pch =20, cex =2)
set.seed(7)
km1 = kmeans(dat, 3, nstart=100)
newdata=data
newdata$class=km1$cluster
View(newdata)
set.seed(101)
sample = sample.split(newdata, SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
sample = sample.split(newdata$class, SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
View(train)
sample <- sample.int(n = nrow(newdata), size = floor(.75*nrow(newdata)), replace = F)
train <- data[sample, ]
test  <- data[-sample, ]
model <- naiveBayes(class ~ ., data = newdata)
class(model)
summary(model)
print(model)
install.packages("naivebayes")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("pysch")
library("naivebayes")
library("dplyr")
library("ggplot2")
library("pysch")
install.packages("psych")
library("psych")
str(newdata)
xtabs(~ class + x._video, data=newdata)
xtabs(~ newdata$X.__video + newdata$class, data=newdata)
newdata$class<- as.factor(newdata$class)
str(newdata)
pairs.panels(newdata[2,3,4])
pairs.panels(newdata[,c(2,3,4)])
model <- naiveBayes(class ~ ., data = newdata)
class(model)
summary(model)
model
plot(model)
data = read.csv("result3.csv", header=TRUE, sep=",")
str(data)
data[is.na(data)] <- 0
data$X.__guide <- as.factor(data$X.__guide)
str(data)
data = read.csv("result3.csv", header=TRUE, sep=",")
str(data)
data = read.csv("result3.csv", header=TRUE, sep=",")
str(data)
data = read.csv("result3.csv", header=TRUE, sep=",")
str(data)
data = read.csv("result3.csv", header=TRUE, sep=",")
str(data)
data[is.na(data)] <- 0
data$X.__guide <- as.factor(data$X.__guide)
str(data)
View(data)
dat=data[,c(2,4,5)]
plot(dat, main = "xx", pch =20, cex =2)
set.seed(7)
km1 = kmeans(dat, 3, nstart=100)
plot(dat, col =(km1$cluster +1) , main="K-Means result with 2 clusters", pch=20, cex=2)
plot(dat, col =(km1$cluster +2) , main="K-Means result with 2 clusters", pch=20, cex=2)
fviz_cluster(km1, data = dat)
library("factoextra")
fviz_cluster(km1, data = dat)
plot3d(dat$X.__lec, dat$X.__other, dat$X.__video, col=km1$cluster)
library("plot3D")
plot3d(dat$X.__lec, dat$X.__other, dat$X.__video, col=km1$cluster)
plot3d(dat$X.__lec, dat$X.__other, dat$X.__video, col=km1$cluster)
library("plot3D")
plot3d(dat$X.__lec, dat$X.__other, dat$X.__video, col=km1$cluster)
plot3D(dat$X.__lec, dat$X.__other, dat$X.__video, col=km1$cluster)
installed.packages("plotly")
library(plotly)
installed.packages("plotly")
install.packages("plotly")
plot3D(dat$X.__lec, dat$X.__other, dat$X.__video, col=km1$cluster)
p <- plot_ly(dat, x = dat$X.__lec, y = dat$X.__other, z = dat$X.__video, color = km1$cluster, colors = c('#BF382A', '#0C4B8E','#FFFFFF')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
library(plotly)
packageVersion('plotly')
p <- plot_ly(dat, x = dat$X.__lec, y = dat$X.__other, z = dat$X.__video, color = km1$cluster, colors = c('#BF382A', '#0C4B8E','#FFFFFF')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="scatter3d-basic")
chart_link
p
newdata=data
newdata$class=km1$cluster
p <- plot_ly(newdata, x = newdata$X.__lec, y = newdata$X.__other, z = newdata$X.__video, color = newdata$cluster, colors = c('#BF382A', '#0C4B8E','#FFFFFF')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
p
p <- plot_ly(newdata, x = newdata$X.__lec, y = newdata$X.__other, z = newdata$X.__video, color = newdata$cluster, colors = c('#BF382A', '#0C4B8E','#CB4E33')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
p
View(newdata)
p <- plot_ly(newdata, x = newdata$X.__lec, y = newdata$X.__other, z = newdata$X.__video, color = newdata$class, colors = c('#BF382A', '#0C4B8E','#CB4E33')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
p
p <- plot_ly(newdata, x = newdata$X.__lec, y = newdata$X.__other, z = newdata$X.__video, color = newdata$class, colors = c('#BF382A', '#0C4B8E','#BF382A')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
p
newdata$class<-as.factor(newdata$class)
p <- plot_ly(newdata, x = newdata$X.__lec, y = newdata$X.__other, z = newdata$X.__video, color = newdata$class, colors = c('#BF382A', '#0C4B8E','#BF382A')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
p
p <- plot_ly(newdata, x = newdata$X.__lec, y = newdata$X.__other, z = newdata$X.__video, color = newdata$class, colors = c('#BF382A', '#0C4B8E','##F2E81A')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
p
p <- plot_ly(newdata, x = newdata$X.__lec, y = newdata$X.__other, z = newdata$X.__video, color = newdata$class, colors = c('#BF382A', '#0C4B8E','#F2E81A')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
p
p <- plot_ly(newdata, x = newdata$X.__lec, y = newdata$X.__other, z = newdata$X.__video, color = newdata$class, colors = c('#BF382A', '#0C4B8E','#F2E81A')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Lecture Slides'),
yaxis = list(title = 'Other Material'),
zaxis = list(title = 'Learning Videos')))
p
library("caTools")
set.seed(101)
sample <- sample.int(n = nrow(newdata), size = floor(.75*nrow(newdata)), replace = T)
train <- data[sample, ]
test  <- data[-sample, ]
View(train)
View(newdata)
str(newdata)
newdata$X.<- as.factor(newdata$X.)
str(newdata)
sample <- sample.int(n = nrow(newdata), size = floor(.75*nrow(newdata)), replace = T)
train <- data[sample, ]
test  <- data[-sample, ]
View(test)
newdata$newclass=newdata$class
set.seed(101)
sample <- sample.int(n = nrow(newdata), size = floor(.75*nrow(newdata)), replace = T)
train <- data[sample, ]
test  <- data[-sample, ]
View(test)
write.csv(newdata,file = "output.csv")
output<-read.csv("output.csv", header = TRUE, sep=",")
View(output)
sample <- sample.int(n = nrow(output), size = floor(.75*nrow(newdata)), replace = T)
sample <- sample.int(n = nrow(output), size = floor(.75*nrow(output)), replace = T)
train <- data[sample, ]
test  <- data[-sample, ]
View(test)
sample <- sample.int(n = nrow(output), size = floor(.75*nrow(output)), replace = F)
train <- data[sample, ]
test  <- data[-sample, ]
sample <- sample.int(n = nrow(output), size = floor(.75*nrow(output)), replace = T)
train <- data[sample, ]
test  <- data[-sample, ]
sample <- sample.int(n = nrow(output), size = floor(.75*nrow(output)), replace = F)
train <- data[sample, ]
test  <- data[-sample, ]
View(output)
sample <- sample.int(n = nrow(output), size = floor(.75*nrow(output)), replace = F)
train <- output[sample, ]
test  <- output[-sample, ]
sample <- sample.int(n = nrow(newdata), size = floor(.75*nrow(newdata)), replace = F)
train <- newdata[sample, ]
test  <- newdata[-sample, ]
View(test)
data = read.csv("result3.csv", header=TRUE, sep=",")
View(data)
str(data)
data = read.csv("resultNew.csv", header=TRUE, sep=",")
str(data)
data = read.csv("resultNew.csv", header=TRUE, sep=",")
View(data)
str(data)
bayesdata=data
bayesdata$X.=as.factor(bayesdata$X.)
bayesdata$Consistent=as.factor(bayesdata$Consistent)
bayesdata$Guide=as.factor(bayesdata$Guide)
data = read.csv("resultNew.csv", header=TRUE, sep=",")
str(data)
bayesdata=data
bayesdata$X.=as.factor(bayesdata$X.)
bayesdata$Consistent=as.factor(bayesdata$Consistent)
bayesdata$Guide=as.factor(bayesdata$Guide)
str(bayesdata)
sample <- sample.int(n = nrow(bayesdata), size = floor(.20*nrow(bayesdata)), replace = F)
train <- bayesdata[sample, ]
test  <- bayesdata[-sample, ]
View(train)
data = read.csv("resultNew.csv", header=TRUE, sep=",")
str(data)
data[is.na(data)] <- 0
dat=data[,c(2,3,4)]
plot(dat, main = "xx", pch =20, cex =2)
set.seed(7)
km1 = kmeans(dat, 3, nstart=100)
newdata=data
p <- plot_ly(newdata, x = newdata$X.__lec, y = newdata$X.__other, z = newdata$X.__video, color = newdata$class, colors = c('#BF382A', '#0C4B8E','#F2E81A')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Lecture Slides'),
yaxis = list(title = 'Other Material'),
zaxis = list(title = 'Learning Videos')))
p
newdata$class=km1$cluster
newdata$class<-as.factor(newdata$class)
p <- plot_ly(newdata, x = newdata$X.__lec, y = newdata$X.__other, z = newdata$X.__video, color = newdata$class, colors = c('#BF382A', '#0C4B8E','#F2E81A')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Lecture Slides'),
yaxis = list(title = 'Other Material'),
zaxis = list(title = 'Learning Videos')))
p
str(newdata)
plot(dat, col =(km1$cluster +2) , main="K-Means result with 2 clusters", pch=20, cex=2)
dat=data[,c(3,4,5)]
plot(dat, main = "xx", pch =20, cex =2)
set.seed(7)
km1 = kmeans(dat, 3, nstart=100)
newdata=data
newdata$class=km1$cluster
newdata$class<-as.factor(newdata$class)
plot(dat, col =(km1$cluster +2) , main="K-Means result with 2 clusters", pch=20, cex=2)
p <- plot_ly(newdata, x = newdata$X.__lec, y = newdata$X.__other, z = newdata$X.__video, color = newdata$class, colors = c('#BF382A', '#0C4B8E','#F2E81A')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Lecture Slides'),
yaxis = list(title = 'Other Material'),
zaxis = list(title = 'Learning Videos')))
p
bayesdata=newdata
bayesdata$X.=as.factor(bayesdata$X.)
bayesdata$Consistent=as.factor(bayesdata$Consistent)
bayesdata$Guide=as.factor(bayesdata$Guide)
str(bayesdata)
sample <- sample.int(n = nrow(bayesdata), size = floor(.60*nrow(bayesdata)), replace = F)
train <- bayesdata[sample, ]
test  <- bayesdata[-sample, ]
library("e1071")
model <- naiveBayes(class ~ ., data = newdata)
model
model <- naiveBayes(class ~ guide+Consistent+Lecture.Views + Other.Views+ Video.Views, train)
model <- naiveBayes(class ~ Guide+Consistent+Lecture.Views + Other.Views+ Video.Views, train)
model
pre <- predict(model,test, type="raw")
pre
table(pre,test$class)
ConfustionMatrix(table(pre,test$class))
table(pre,test$class)
pre <- predict(model,test, type="raw")
pre
table(pre,test$class)
View(train)
View(pre)
View(pre)
View(pre)
plot(model)
pre <- predict(model,test)
pre
table(pre,test$class)
confusionmatrix(table(pre,test$class))
confusionMatrix(table(pre,test$class))
library("caret")
install.packages("caret")
library("caret")
confusionMatrix(table(pre,test$class))
setwd("C:/Users/Priya/dev/Kali/psquare")
data <- read.csv("WineData.csv", Header=True, sep="")
data <- read.csv("WineData.csv", header=TRUE, sep="")
data <- read.csv("WineData.csv", header=TRUE, sep="")
data <- read.csv("WineData.csv", header=TRUE, sep=",")
library("catools")
library("caTools")
library("caret")
str(data)
set.seed(8)
split <- createDataPartition(data$variety, p=0.6, list=FALSE)
train<- data[split,]
test<- data[-split,]
str(train)
str(test)
write.csv(train, "train.csv");
View(train)
View(test)
test[111]
test[][111]
test(111)
test[111,]
test[91,]
data[91,]
data[91,]$description
